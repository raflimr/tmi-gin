// Code generated by sqlc. DO NOT EDIT.
// source: mahasiswa.sql

package db

import (
	"context"
)

const changePassword = `-- name: ChangePassword :exec
UPDATE
    mahasiswa
SET
    password = $2
WHERE
    email = $1
`

type ChangePasswordParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) error {
	_, err := q.db.ExecContext(ctx, changePassword, arg.Email, arg.Password)
	return err
}

const checkEmail = `-- name: CheckEmail :one
SELECT id, username, password, nomor_hp, email, url_foto, nama_lengkap, tanggal_lahir, jenis_kelamin, university, nim, jurusan, tahun_masuk, kota_kabupaten, token, created_at FROM mahasiswa WHERE email = $1
`

func (q *Queries) CheckEmail(ctx context.Context, email string) (Mahasiswa, error) {
	row := q.db.QueryRowContext(ctx, checkEmail, email)
	var i Mahasiswa
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.NomorHp,
		&i.Email,
		&i.UrlFoto,
		&i.NamaLengkap,
		&i.TanggalLahir,
		&i.JenisKelamin,
		&i.University,
		&i.Nim,
		&i.Jurusan,
		&i.TahunMasuk,
		&i.KotaKabupaten,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const checkToken = `-- name: CheckToken :one
SELECT id, username, password, nomor_hp, email, url_foto, nama_lengkap, tanggal_lahir, jenis_kelamin, university, nim, jurusan, tahun_masuk, kota_kabupaten, token, created_at FROM mahasiswa WHERE token = $1
`

func (q *Queries) CheckToken(ctx context.Context, token string) (Mahasiswa, error) {
	row := q.db.QueryRowContext(ctx, checkToken, token)
	var i Mahasiswa
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.NomorHp,
		&i.Email,
		&i.UrlFoto,
		&i.NamaLengkap,
		&i.TanggalLahir,
		&i.JenisKelamin,
		&i.University,
		&i.Nim,
		&i.Jurusan,
		&i.TahunMasuk,
		&i.KotaKabupaten,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const checkUsername = `-- name: CheckUsername :one
SELECT id, username, password, nomor_hp, email, url_foto, nama_lengkap, tanggal_lahir, jenis_kelamin, university, nim, jurusan, tahun_masuk, kota_kabupaten, token, created_at FROM mahasiswa WHERE username = $1
`

func (q *Queries) CheckUsername(ctx context.Context, username string) (Mahasiswa, error) {
	row := q.db.QueryRowContext(ctx, checkUsername, username)
	var i Mahasiswa
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.NomorHp,
		&i.Email,
		&i.UrlFoto,
		&i.NamaLengkap,
		&i.TanggalLahir,
		&i.JenisKelamin,
		&i.University,
		&i.Nim,
		&i.Jurusan,
		&i.TahunMasuk,
		&i.KotaKabupaten,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const createMahasiswa = `-- name: CreateMahasiswa :one
INSERT INTO mahasiswa (
  username, password, email, nomor_hp, url_foto, nama_lengkap, tanggal_lahir, jenis_kelamin, university, nim, jurusan, tahun_masuk,kota_kabupaten, token
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
)
RETURNING id, username, password, nomor_hp, email, url_foto, nama_lengkap, tanggal_lahir, jenis_kelamin, university, nim, jurusan, tahun_masuk, kota_kabupaten, token, created_at
`

type CreateMahasiswaParams struct {
	Username      string `json:"username"`
	Password      string `json:"password"`
	Email         string `json:"email"`
	NomorHp       string `json:"nomor_hp"`
	UrlFoto       string `json:"url_foto"`
	NamaLengkap   string `json:"nama_lengkap"`
	TanggalLahir  string `json:"tanggal_lahir"`
	JenisKelamin  string `json:"jenis_kelamin"`
	University    string `json:"university"`
	Nim           string `json:"nim"`
	Jurusan       string `json:"jurusan"`
	TahunMasuk    string `json:"tahun_masuk"`
	KotaKabupaten string `json:"kota_kabupaten"`
	Token         string `json:"token"`
}

func (q *Queries) CreateMahasiswa(ctx context.Context, arg CreateMahasiswaParams) (Mahasiswa, error) {
	row := q.db.QueryRowContext(ctx, createMahasiswa,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.NomorHp,
		arg.UrlFoto,
		arg.NamaLengkap,
		arg.TanggalLahir,
		arg.JenisKelamin,
		arg.University,
		arg.Nim,
		arg.Jurusan,
		arg.TahunMasuk,
		arg.KotaKabupaten,
		arg.Token,
	)
	var i Mahasiswa
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.NomorHp,
		&i.Email,
		&i.UrlFoto,
		&i.NamaLengkap,
		&i.TanggalLahir,
		&i.JenisKelamin,
		&i.University,
		&i.Nim,
		&i.Jurusan,
		&i.TahunMasuk,
		&i.KotaKabupaten,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const getMahasiswa = `-- name: GetMahasiswa :one
SELECT id, username, password, nomor_hp, email, url_foto, nama_lengkap, tanggal_lahir, jenis_kelamin, university, nim, jurusan, tahun_masuk, kota_kabupaten, token, created_at FROM mahasiswa
WHERE username = $1 OR email =$2 LIMIT 1
`

type GetMahasiswaParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) GetMahasiswa(ctx context.Context, arg GetMahasiswaParams) (Mahasiswa, error) {
	row := q.db.QueryRowContext(ctx, getMahasiswa, arg.Username, arg.Email)
	var i Mahasiswa
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.NomorHp,
		&i.Email,
		&i.UrlFoto,
		&i.NamaLengkap,
		&i.TanggalLahir,
		&i.JenisKelamin,
		&i.University,
		&i.Nim,
		&i.Jurusan,
		&i.TahunMasuk,
		&i.KotaKabupaten,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const updateMahasiswa = `-- name: UpdateMahasiswa :exec
UPDATE
    mahasiswa
SET
    username = $2,
    password = $3,
    nomor_hp = $4,
    email = $5,
    url_foto = $6,
    nama_lengkap = $7,
    tanggal_lahir = $8,
    jenis_kelamin = $9,
    university = $10,
    nim = $11,
    jurusan = $12,
    tahun_masuk = $13,
    kota_kabupaten = $14
WHERE
    id = $1
`

type UpdateMahasiswaParams struct {
	ID            int32  `json:"id"`
	Username      string `json:"username"`
	Password      string `json:"password"`
	NomorHp       string `json:"nomor_hp"`
	Email         string `json:"email"`
	UrlFoto       string `json:"url_foto"`
	NamaLengkap   string `json:"nama_lengkap"`
	TanggalLahir  string `json:"tanggal_lahir"`
	JenisKelamin  string `json:"jenis_kelamin"`
	University    string `json:"university"`
	Nim           string `json:"nim"`
	Jurusan       string `json:"jurusan"`
	TahunMasuk    string `json:"tahun_masuk"`
	KotaKabupaten string `json:"kota_kabupaten"`
}

func (q *Queries) UpdateMahasiswa(ctx context.Context, arg UpdateMahasiswaParams) error {
	_, err := q.db.ExecContext(ctx, updateMahasiswa,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.NomorHp,
		arg.Email,
		arg.UrlFoto,
		arg.NamaLengkap,
		arg.TanggalLahir,
		arg.JenisKelamin,
		arg.University,
		arg.Nim,
		arg.Jurusan,
		arg.TahunMasuk,
		arg.KotaKabupaten,
	)
	return err
}

const updateOTPInDB = `-- name: UpdateOTPInDB :exec
UPDATE
    mahasiswa
SET
    token = $2
WHERE
    email = $1
`

type UpdateOTPInDBParams struct {
	Email string `json:"email"`
	Token string `json:"token"`
}

func (q *Queries) UpdateOTPInDB(ctx context.Context, arg UpdateOTPInDBParams) error {
	_, err := q.db.ExecContext(ctx, updateOTPInDB, arg.Email, arg.Token)
	return err
}
