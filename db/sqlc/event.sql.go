// Code generated by sqlc. DO NOT EDIT.
// source: event.sql

package db

import (
	"context"
	"database/sql"
)

const listEvent = `-- name: ListEvent :many
SELECT
    e.url_foto,
    e.judul_event,
    e.deskripsi_event,
    e.tanggal_event,
    e.id,
    (
        SELECT
            COUNT(se.id_mahasiswa)
        FROM
            status_event as se
        where
            se.id_event = e.id
        GROUP BY
            e.id
    )
FROM
    event e
LIMIT
    $1 OFFSET $2
`

type ListEventParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListEventRow struct {
	UrlFoto        sql.NullString `json:"url_foto"`
	JudulEvent     sql.NullString `json:"judul_event"`
	DeskripsiEvent sql.NullString `json:"deskripsi_event"`
	TanggalEvent   sql.NullString `json:"tanggal_event"`
	ID             int32          `json:"id"`
	Count          sql.NullInt64          `json:"count"`
}

func (q *Queries) ListEvent(ctx context.Context, arg ListEventParams) ([]ListEventRow, error) {
	rows, err := q.db.QueryContext(ctx, listEvent, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEventRow{}
	for rows.Next() {
		var i ListEventRow
		if err := rows.Scan(
			&i.UrlFoto,
			&i.JudulEvent,
			&i.DeskripsiEvent,
			&i.TanggalEvent,
			&i.ID,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
